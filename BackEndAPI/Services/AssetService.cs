using System.Linq;
using BackEndAPI.Interfaces;
using BackEndAPI.Models;
using System.Collections.Generic;
using System.IdentityModel.Tokens.Jwt;
using System.Text;
using BackEndAPI.Helpers;
using Microsoft.Extensions.Options;
using Microsoft.IdentityModel.Tokens;
using System.Security.Claims;
using System;
using System.Threading.Tasks;
using BackEndAPI.Entities;
using BackEndAPI.Enums;
using AutoMapper;

namespace BackEndAPI.Services
{
    public class AssetService : IAssetService
    {

        private readonly IMapper _mapper;
        private readonly IAsyncAssetRepository _assetRepository;
        private readonly IAsyncAssetCategoryRepository _categoryRepository;
        private readonly IAsyncUserRepository _userRepository;
        
        public AssetService(
            IAsyncAssetRepository assetRepository,
            IAsyncUserRepository userRepository,
            IAsyncAssetCategoryRepository categoryRepository,
            IMapper mapper)
        {
            _assetRepository = assetRepository;
            _userRepository = userRepository;
            _categoryRepository = categoryRepository;
            _mapper = mapper;
        }

        public async Task<Asset> Create(CreateAssetModel model)
        {

            if (model == null)
            {

                throw new ArgumentNullException(Message.NullAsset);

            }

            Asset asset = _mapper.Map<Asset>(model);

            var assetNumber = _assetRepository.CountingAssetNumber(asset.CategoryId);
            if (assetNumber < 0)
            {
                throw new Exception(Message.AssetNumberError);
            }

            var category = await _categoryRepository.GetById(asset.CategoryId);
            if (category == null)
            {

                throw new Exception(Message.InvalidId);
                
            }

            asset.AssetCode = AutoGenerator.AutoGeneratedAssetCode(assetNumber, category.CategoryCode);

            return await _assetRepository.Create(asset);
        }
        public async Task<IQueryable<Asset>> GetAllAssets(int userId)
        {
            var user = await _userRepository.GetById(userId);
            if (user == null)
            {
                throw new InvalidOperationException("Can not find user");
            }
            var listAsset = _assetRepository.GetAll()
                               .Where(x => x.Location == user.Location && x.State == AssetState.Available)
                               .AsQueryable();

            return listAsset;
        }

        public async Task<IQueryable<Asset>> GetAssetsBySearching(int userId, string searchText)
        {
            var user = await _userRepository.GetById(userId);
            if (user == null)
            {
                throw new InvalidOperationException("Can not find user");
            }
            var listAsset = _assetRepository.GetAll()
                               .Where(x => x.Location == user.Location 
                               && x.State == AssetState.Available
                               && (x.AssetCode.Contains(searchText)
                               || x.AssetName.Contains(searchText)))
                               .AsQueryable();
            return listAsset;
        }

        public async Task<Asset> GetById(int id)
        {
            var asset = await _assetRepository.GetById(id);
            if(asset == null)
            {
                throw new InvalidOperationException("Can not find asset");
            }

            return asset;
        }
    }
}