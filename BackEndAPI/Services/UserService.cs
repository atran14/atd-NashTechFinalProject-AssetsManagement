using System.Linq;
using System.Collections.Generic;
using BackEndAPI.Interfaces;
using BackEndAPI.Models;
using System;
using BackEndAPI.Helpers;
using BackEndAPI.Interfaces;
using System.Threading.Tasks;
using BackEndAPI.Models;
using System;
using BackEndAPI.Entities;
using BackEndAPI.Helpers;
using BackEndAPI.Enums;
using AutoMapper;

namespace BackEndAPI.Services
{
    public class UserService : IUserService
    {
        private readonly IAsyncUserRepository _repository;
        private readonly IAsyncAssignmentRepository _assignmentRepository;

        private readonly IMapper _mapper;

        public UserService(IAsyncUserRepository repository, IAsyncAssignmentRepository assignmentRepository, IMapper mapper)
        {
            _repository = repository;
            _assignmentRepository = assignmentRepository;
            _mapper = mapper;
        }

        public GetUsersListPagedResponseDTO GetUsers(PaginationParameters paginationParameters)
        {
            var users = PagedList<User>.ToPagedList(
                _repository.GetAll().Where(u => u.Status == UserStatus.Active),
                paginationParameters.PageNumber,
                paginationParameters.PageSize
            );

            return new GetUsersListPagedResponseDTO
            {
                CurrentPage = users.CurrentPage,
                PageSize = users.PageSize,
                TotalCount = users.TotalCount,
                TotalPages = users.TotalPages,
                HasNext = users.HasNext,
                HasPrevious = users.HasPrevious,
                Items = users.Select(u => UserToDTO(u))
            };
        }

        public async Task Disable(int id)
        {
            int userValid = _assignmentRepository.CountUser(id);
            var user = await _repository.GetById(id);
            if (user == null)
            {
                throw new InvalidOperationException("Can not find user");
            }

            if (userValid > 0)
            {
                throw new ArgumentException("User is still valid assignment");
            }
            else
            {
                user.Status = UserStatus.Disabled;
                await _repository.Update(user);
            }

        }

        public async Task Update(int id, EditUserModel model)
        {
            var user = await _repository.GetById(id);

            if (user == null)
            {
                throw new InvalidOperationException("Can not find user");
            }

            if (DateTime.Now.AddYears(-18) < model.DateOfBirth)
            {

                throw new Exception("User is under 18. Please select different date");
            }

            if (model.JoinedDate.DayOfWeek == DayOfWeek.Saturday
                   && model.JoinedDate.DayOfWeek == DayOfWeek.Sunday)
            {
                throw new Exception("Join Date is Saturday or Sunday. Please select different date");
            }

            if (model.JoinedDate < model.DateOfBirth)
            {

                throw new Exception("Join Date is not later than Date Of Birth. Please select different date");
            }

            user.DateOfBirth = model.DateOfBirth;
            user.JoinedDate = model.JoinedDate;
            user.Gender = model.Gender;
            user.Type = model.Type;
            await _repository.Update(user);
        }
        
        public async Task<User> Create(CreateUserModel model)
        {

            if (model == null)
            {
                throw new ArgumentNullException("Entity can not be null!");
            }

            bool isOlderThan18 = (model.DateOfBirth.Date <= DateTime.Now.Date.AddYears(-18));
            bool isEarlierThanDob = (model.JoinedDate.Date > model.DateOfBirth.Date);
            bool isWeekend = (model.JoinedDate.Date.DayOfWeek == DayOfWeek.Saturday || model.JoinedDate.Date.DayOfWeek == DayOfWeek.Sunday);

            if (!isOlderThan18)
            {

                throw new Exception("User is under 18. Please select a different date");

            }

            if (!isEarlierThanDob)
            {

                throw new Exception("Joined date is not later than Date of Birth. Please select a different date");

            }


            if (isWeekend)
            {

                throw new Exception("Joined date is Saturday or Sunday. Please select a different date");

            }

            User user = _mapper.Map<User>(model);
            user.UserName = AutoGenerator.AutoGeneratedUsername(model.FirstName, model.LastName, _repository);

            User _user = await _repository.Create(user);

            _user.StaffCode = AutoGenerator.AutoGeneratedStaffCode(_user.Id);
            _user.Password = AutoGenerator.AutoGeneratedPassword(_user.UserName, model.DateOfBirth);
            await _repository.Update(_user);
            return _user;

        }
        private UserDTO UserToDTO(User user)
        {
            return new UserDTO
            {
                Id = user.Id,
                Username = user.UserName,
                FirstName = user.FirstName,
                LastName = user.LastName,
                DateOfBirth = user.DateOfBirth,
                Gender = user.Gender,
                JoinedDate = user.JoinedDate,
                Location = user.Location,
                StaffCode = user.StaffCode,
                Type = user.Type,
            };
        }

    }


}