using BackEndAPI.Repositories;
using BackEndAPI.Interfaces;
using System.Threading.Tasks;
using BackEndAPI.Models;
using System;
using System.Text.RegularExpressions;
using System.Linq;

namespace BackEndAPI.Services
{
    public class UserService : IUserService
    {
        private readonly IAsyncUserRepository _repository;

        public UserService(IAsyncUserRepository repository)
        {
            _repository = repository;
        }


        public async Task<User> Create(CreateUserModel model)
        {

            if (model == null)
            {
                throw new ArgumentNullException("Entity can not be null!");
            }

            bool isOlderThan18 = (model.DateOfBirth.Date <= DateTime.Now.Date.AddYears(-18));
            bool isEarlierThanDob = (model.JoinedDate.Date > model.DateOfBirth.Date);
            bool isWeekend = (model.JoinedDate.Date.DayOfWeek == DayOfWeek.Saturday || model.JoinedDate.Date.DayOfWeek == DayOfWeek.Sunday);

            if (isOlderThan18)
            {

                if (isEarlierThanDob)
                {

                    if (!isWeekend)
                    {

                        User user = new User
                        {
                            FirstName = model.FirstName,
                            LastName = model.LastName,
                            DateOfBirth = model.DateOfBirth,
                            JoinedDate = model.JoinedDate,
                            Gender = model.Gender,
                            Type = model.Type,
                            StaffCode = "",
                            Username = AutoGenerator.AutoGeneratedUsername(model.FirstName, model.LastName),
                            Password = AutoGenerator.AutoGeneratedPassword(
                                        AutoGenerator.AutoGeneratedUsername(model.FirstName, model.LastName), model.DateOfBirth),
                            Location = model.Location,
                            Status = UserStatus.Active
                        };

                        User _user = await _repository.Create(user);

                        _user.StaffCode = AutoGenerator.AutoGeneratedStaffCode(_user.Id);
                        await _repository.Update(_user);
                        return _user;

                    }

                    throw new ArgumentException("Joined date is Saturday or Sunday. Please select a different date");

                }

                throw new ArgumentException("Joined date is not later than Date of Birth. Please select a different date");

            }

            throw new ArgumentException("User is under 18. Please select a different date");

        }

    }
}