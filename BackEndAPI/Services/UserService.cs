using BackEndAPI.Interfaces;
using System.Threading.Tasks;
using BackEndAPI.Models;
using System;
using BackEndAPI.Entities;
using BackEndAPI.Helpers;
using BackEndAPI.Enums;
using AutoMapper;

namespace BackEndAPI.Services
{
    public class UserService : IUserService
    {

        private readonly IMapper _mapper;
        private readonly IAsyncUserRepository _repository;

        public UserService(IAsyncUserRepository repository, IMapper mapper)
        {
            _repository = repository;
            _mapper = mapper;
        }

        public async Task<User> Create(CreateUserModel model)
        {

            if (model == null)
            {
                throw new ArgumentNullException("Entity can not be null!");
            }

            bool isOlderThan18 = (model.DateOfBirth.Date <= DateTime.Now.Date.AddYears(-18));
            bool isEarlierThanDob = (model.JoinedDate.Date > model.DateOfBirth.Date);
            bool isWeekend = (model.JoinedDate.Date.DayOfWeek == DayOfWeek.Saturday || model.JoinedDate.Date.DayOfWeek == DayOfWeek.Sunday);

            if (!isOlderThan18)
            {

                throw new Exception("User is under 18. Please select a different date");

            }

            if (!isEarlierThanDob)
            {

                throw new Exception("Joined date is not later than Date of Birth. Please select a different date");

            }


            if (isWeekend)
            {

                throw new Exception("Joined date is Saturday or Sunday. Please select a different date");

            }

            User user = _mapper.Map<User>(model);
            user.UserName = AutoGenerator.AutoGeneratedUsername(model.FirstName, model.LastName, _repository);

            User _user = await _repository.Create(user);

            _user.StaffCode = AutoGenerator.AutoGeneratedStaffCode(_user.Id);
            _user.Password = AutoGenerator.AutoGeneratedPassword(_user.UserName, model.DateOfBirth);
            await _repository.Update(_user);
            return _user;

        }

    }


}