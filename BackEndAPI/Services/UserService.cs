using BackEndAPI.Repositories;
using BackEndAPI.Interfaces;
using System.Threading.Tasks;
using BackEndAPI.Models;
using System;
using System.Text.RegularExpressions;
using System.Linq;

namespace BackEndAPI.Services
{
    public class UserService : IUserService
    {
        private readonly IAsyncUserRepository _repository;

        public UserService(IAsyncUserRepository repository)
        {
            _repository = repository;
        }


        public async Task<User> Create(CreateUserModel model)
        {

            if (model == null)
            {
                throw new ArgumentNullException("Entity can not be null!");
            }

            bool isOlderThan18 = (model.DateOfBirth <= DateTime.Now.AddYears(-18));
            bool isEarlierThanDob = (model.JoinedDate > model.DateOfBirth);
            bool isWeekend = (model.JoinedDate.DayOfWeek == DayOfWeek.Saturday || model.JoinedDate.DayOfWeek == DayOfWeek.Sunday);

            if (isOlderThan18)
            {

                if (isEarlierThanDob)
                {

                    if (!isWeekend)
                    {

                        User user = new User
                        {
                            FirstName = model.FirstName,
                            LastName = model.LastName,
                            DateOfBirth = model.DateOfBirth,
                            JoinedDate = model.JoinedDate,
                            Gender = model.Gender,
                            Type = model.Type,
                            StaffCode = "",
                            Username = AutoGeneratedUsername(model.FirstName, model.LastName),
                            Password = AutoGeneratedPassword(
                                        AutoGeneratedUsername(model.FirstName, model.LastName), model.DateOfBirth),
                            Location = model.Location,
                            Status = UserStatus.Active
                        };

                        User _user = await _repository.Create(user);

                        _user.StaffCode = AutoGeneratedStaffCode(_user.Id);
                        await _repository.Update(_user);
                        return _user;

                    }

                    throw new ArgumentException("Joined date is Saturday or Sunday. Please select a different date");

                }

                throw new ArgumentException("Joined date is not later than Date of Birth. Please select a different date");

            }

            throw new ArgumentException("User is under 18. Please select a different date");

        }

        private string AutoGeneratedStaffCode(int id)
        {

            return $"SD{id.ToString("D4")}";
        }

        private string AutoGeneratedUsername(string firstName, string lastName)
        {

            string name = $"{firstName.ToLower()} {lastName.ToLower()}";
            string shortName = string.Empty;

            name = Regex.Replace(name, @"\s+", " ");

            string[] nameParts = name.Trim().Split(' ');

            for (var index = 0; index < nameParts.Length; index++)
            {
                var part = nameParts[index];
                if (index == 0)
                    shortName += part;
                else
                {
                    shortName += part.Substring(0, 1);
                }
            }

            // for (int i = 1; i < _repository.GetAll().Count(); i++)
            // {
            //     var isExist = _repository.CheckUsernameExist(shortName);
            //     if (isExist)
            //     {
            //         shortName = $"{shortName}{i}";
            //     }
            // }

            return shortName;

        }

        private string AutoGeneratedPassword(string username, DateTime dob)
        {
            return $"{username}@{dob.Date.ToString("ddmmyyyy")}";
        }

    }
}